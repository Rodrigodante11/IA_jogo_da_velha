# -*- coding: utf-8 -*-
"""IA_jogo_velha.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-EL66dhxlLB3RMowY6ZQ_AA17JltXay3
"""

# !pip uninstall sklearn
# !pip uninstall scikit-learn
# !pip install sklearn

import pandas as pd  # importando a bibliotecas pandas
from sklearn.datasets import load_digits
from sklearn.linear_model import Perceptron

df_tic_tac_toe = pd.read_csv("tic-tac-toe.csv")  # Lendo o arquivo csv e armazendano em um dataframe

"""# Nova secção"""

df_tic_tac_toe.isna().any() # verificando campo vazio que pode quebrar o sistema

df_tic_tac_toe.head() # vendo como esta os dados

# Replace tudo para numero
df_tic_tac_toe.replace({'o' :-1 , 'b' : 0 , 'x': 1 , 'positivo' : 1 , 'negativo':-1 }, inplace=True)

# Separação dos dados de entrada e saida 
saida = df_tic_tac_toe['resultado']
entrada = df_tic_tac_toe.drop(columns ='resultado')

from sklearn.model_selection import train_test_split #serve para dividir os dados em train e test

# test_size=0.2 = 20¨%
x_train, x_test, y_train, y_test = train_test_split(entrada, saida, test_size=0.2)

from sklearn.naive_bayes import GaussianNB #algoritmo que utilizei para classificação dos dados
#Modelo escolhido e utilizado é o Naive Bayes
model = GaussianNB()

#Treinando o modelo
model.fit(x_train, y_train)

#Prevendo a resposta para os dados de teste
y_pred = model.predict(x_test)

#Métrica de avaliação do modelo
from sklearn.metrics import classification_report
classification_report(y_test, y_pred)

# Valores de entrada para usuario 
lista = []
for num in range(9):

  try:
    print("Digite a posicao : "+ str(num+1))
    lista.append(int(input())) # se digitar valor diferente de int o cast para int ira gerar uma excessao 
  except:
    print("Error: Digite um valor Valido !")
    break


filtrados = [x for x in lista if x > 1 or x < -1] # pegando valores diferentes dos validos ( -1, 0 , 1 )
if (len(filtrados) ==0 ): # verificando se existe valor diferentes dos validos ( -1, 0 , 1 )
  x_input = pd.DataFrame(lista) # convertendo a lista em pandas dataframe 
else:
  print("Error: valores diferentes de -1, 0 , 1 foi inserido ")

# x = [-1, 1,	1, 0,	-1, 0, 1,	0,	-1] # NAO -1vitoria d X
# x = [1, 1,	1, 0,	-1, 0, 1,	-1,	-1] # vitoria d X

a = x_input.transpose()
b = a.replace({-1 :'O' , 1 : 'X' , 0 : 'B' }, inplace=True)

print("|  " + a[0][0] + "  " + a[1][0] + "  " + a[2][0] + " | ")
print("|  " + a[3][0] + "  " + a[4][0] + "  " + a[5][0] + " | ")
print("|  " + a[6][0] + "  " + a[7][0] + "  " + a[8][0] + " | ")

#Prevendo a resposta para os dados de teste

y_user_pred = model.predict(x_input.transpose())

print("Vitoria de X: "+ str(y_user_pred[0] == 1))
print()
print()
print()
# if int(y_user_pred[0]) == 1:
#     print("Vitoria de X")
# else:
#     print("Vitoria de O")

